

detect if the key was overwritten. The loading of a key into the actual hardware key
slot could be done immediately before the key is used, which would result in a
combined loading and processing of the key, as well as a separate operation
following the writing of a key into a key element. This would result in separate
operations for loading and processing the key.
If a new driver is to be implemented, it would also be possible to configure keys with
completely independent key elements. These independent keys can be stored in
RAM and passed to the hardware key slot only when required for an operation. The
number of keys stored in the driver can be independent of (and much larger than) the
number of hardware key slots. This requires, of course, a handling and storing of
keys in software with all potential drawbacks.
Storing keys permanently is done by calling Crypto_KeySetValid with the
configuration parameter CryptoKeyElementPersist set. As in most cases writing
operation takes some time it is recommended to store key permanently using the
CRYPTO_KEYSETVALID job interface.
Different key types can have compatible key elements. In this case the keyElementId
has the same value. Key elements with the same keyElementId may be regarded as
compatible. This way, the same key can be used for different services.
The key material therefore shall always have the keyElementId 1.
Example is the generation of a key with the Key Management Interface and usage of
the same key in a primitive like MacGenerate afterwards.
A key element may not be fully written. In some cases, the size of data to be
stored in the key element can vary, e.g. asymmetric key elements. The Crypto
Driver shall store the actually written size of data for internal usage and for
exporting the element with Crypto_KeyElementGet(). If the key element shall
allow to be not fully read or written can be configured with the parameter
CryptoKeyElementAllowPartialAccess in the CryptoKeyElement container.
7.2.5 Key Formats
The key element with ID 1 is a particular key that provides the cryptographic key for
the related cryptographic primitive.
In IETF RFC, keys are described in a specific format to provide a common and
compact way to transport them between entities.
To support this standard also within AUTOSAR, the following chapter describes key
formats that are supported by AUTOSAR.
This allows to provide a given key in such a format to the crypto driver, e.g. from
parts of a certificate without the needs for an application to analyse the structure and
to construct that data.
By supporting the IETF RFC within the crypto driver, the key material can be
provided as is.
If supported, the extraction of the required key elements, such as private or public
key fields, is accomplished in the driver.
27 of 125 Document ID 807: AUTOSAR_SWS_CryptoDriver
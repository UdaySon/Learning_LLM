

key identified by the cryptoKeyId and the partner public key. The shared secret key
is stored as a key element in the same key.
Available via Crypto.h
()
[SWS_Crypto_00111] ⌈ If the module is not yet initialized and if development error
detection for the Crypto Driver is enabled, the function
Crypto_KeyExchangeCalcSecret shall report CRYPTO_E_UNINIT to the DET
and return E_NOT_OK.
()
[SWS_Crypto_00112] ⌈ If the parameter cryptoKeyId is out of range and if
development error detection for the Crypto Driver is enabled, the function
Crypto_KeyExchangeCalcSecret shall report CRYPTO_E_PARAM_HANDLE to the
DET and return E_NOT_OK
()
[SWS_Crypto_00113] ⌈ If the parameter partnerPublicValuePtr is a null
pointer and if development error detection for the Crypto Driver is enabled, the
function Crypto_KeyExchangeCalcSecret shall report
CRYPTO_E_PARAM_POINTER to the DET and return E_NOT_OK.
()
[SWS_Crypto_00115] ⌈ If partnerPublicValueLength is zero and if
development error detection for the Crypto Driver is enabled, the function
Crypto_KeyExchangeCalcSecret shall report CRYPTO_E_PARAM_VALUE to the
DET and return E_NOT_OK.
()
If no errors are detected by Crypto, the service
Crypto_KeyExchangeCalcSecret() calculated the shared secret key for the key
exchange and store it as key element in cryptoKeyId.
8.3.5 Custom Service Interface
[SWS_Crypto_91027]⌈
Service Name Crypto_CustomSync
Std_ReturnType Crypto_CustomSync (
uint32 dispatchId,
uint32 keyId,
Syntax uint32 keyElementId,
uint32 targetKeyId,
uint32 targetKeyElementId,
const uint8* inputPtr,
75 of 125 Document ID 807: AUTOSAR_SWS_CryptoDriver
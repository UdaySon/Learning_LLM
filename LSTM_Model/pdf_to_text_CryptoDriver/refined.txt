1 Introduction and functional overview This specification specifies the functionality, API and the configuration of the AUTOSAR Basic Software module Crypto Driver. The Crypto Drivers are located in the Microcontroller Abstraction Layer, which is below the Crypto Hardware Abstraction Layer (Crypto Interface [4]) and the upper service layer (Crypto Service Manager [5]). The Crypto Driver is a driver for a specific device, that is only abstracting the features supported by the hardware. The Crypto Drivers allow defining of different Crypto Driver Objects (i.e. AES accelerator, SW component, etc), which shall be used for concurrent requests in different buffers. For each hardware object a priority-dependent job processing shall be supported. A crypto software solution (i.e. software-based CDD) can define interfaces identical to the Crypto Drivers for interacting with the upper layers, which shall provide an interface to the applications. 2 Acronyms and abbreviations Abbreviation / Description: Acronym: CDD Complex Device Driver CSM Crypto Service Manager CRYIF Crypto Interface CRYPTO Crypto Driver DET Default Error Tracer HSM Hardware Security Module HW Hardware SHE Security Hardware Extension SW Software 2.1 Glossary of Terms Terms: Description: Crypto Driver A Crypto Driver implements one or more Crypto Driver Objects. Object The Crypto Driver Object can offer different crypto primitives in hardware or software. The Crypto Driver Objects of one Crypto Driver are independent of each other. There is only one workspace for each Crypto Driver Object (i.e. only one crypto primitive can be performed at the same time) The only exception of independency between Crypto Driver Object is the usage of a default Random Number Generator (see [SWS_Crypto_00225]). Key A Key can be referenced by a job in the Csm. In the Crypto Driver, the key references a specific key type. Key Type A key type consists of references to key elements. The key types are typically pre-configured by the vendor of the Crypto Driver. Key Element Key elements are used to store data. This data can be e.g. key material or the IV needed for AES encryption. It can also be used to configure the behaviour of the key management functions. Key elements from different keys have different memory area (both NV and RAM area). Channel A channel is the path from a Crypto Service Manager queue via the Crypto Interface to a specific Crypto Driver Object. Job A 'Job' is a configured 'CsmJob'. Among others, it refers to a key, a cryptographic primitive and a reference channel. Crypto Primitive 'Primitive' is an instance of a configured cryptographic algorithm realized in a Crypto Driver Object. Among others it refers to a functionality provided by the CSM to the application, the concrete underlining 'algorithmfamily' (e.g. AES, MD5, RSA, ...), and a 'algorithmmode' (e.g. ECB, CBC, ...). Operation An operation of a crypto primitive declares what part of the crypto primitive shall be performed. There are three different operation modes: START Operation mode indicates a new request of a crypto primitive, and it shall cancel all previous requests of the same job and primitive. UPDATE Operation mode indicates, that the crypto primitive expects input data. FINISH Operation mode indicates, that after this part all data are fed completely and the crypto primitive can finalize the calculations. It is also possible to perform more than one operation at once by concatenating the corresponding bits of the operation mode argument. Priority The priority of a job defines the importance of it. The higher the priority (as well in value), the more immediate the job will be executed. The priority of a cryptographic job is part of the configuration. Service A 'Service' shall be understood as defined in the TR_Glossary document: A service is a type of operation that has a published specification of interface and behavior, involving a contract between the provider of the capability and the potential clients. 5 Dependencies to other modules [SWS_Crypto_00003] If an off-chip crypto hardware module (e.g. external HSM) is used, the Crypto Driver shall use services of other MCAL drivers (e.g. SPI). Hint: If the Crypto Driver uses services of other MCAL drivers (e.g. SPI), it must be ensured that these drivers are up and running before initializing the Crypto Driver module. [SWS_Crypto_00116] ⌈The Crypto Driver shall be able to store key material in a non-volatile way if supported by the dedicated crypto hardware. Note: The Crypto Drivers are called by the Crypto Interface (CRYIF), which is implemented according to the cryptographic interface specification [4]. The Crypto Drivers access the underlying hardware and software objects, to calculate results with their cryptographic primitives. The results shall be forwarded to the CRYIF. 5.1 File structure 5.1.1 Code File Structure The code file structure is not defined within this specification completely. [SWS_Crypto_00005] ⌈ The code file structure shall contain a source file Crypto.c and a code file Crypto_KeyManagement.c. 7 Functional specification The Crypto Driver module is located in the micro controller abstraction layer and is below the Crypto Interface module and Crypto Service Manager module. It implements a generic interface for synchronous and asynchronous cryptographic primitives. It also supports key storage, key configuration, and key management for cryptographic services. To provide cryptographic functionalities an ECU needs to integrate one unique Crypto Service Manager module and one Crypto Interface. However, the Crypto Interface can access several Crypto Drivers, each of them is configured according to the underlying Crypto Driver Object. A Crypto Driver Object represents an instance of independent crypto hardware “device” (e.g. AES accelerator). There could be a channel for fast AES and CMAC calculations on an HSM for jobs with high priority, which ends on a native AES calculation service in the Crypto Driver. But it is also possible, that a Crypto Driver Object is a piece of software, e.g. for RSA calculations where jobs are able to encrypt, decrypt, sign or verify data. The Crypto Driver Object is the endpoint of a crypto channel. 7.1 Pre-Configuration The vendor of the Crypto Driver has to provide a pre-configuration for the Crypto Driver which represents the capabilities of the Crypto Driver. The pre-configuration shall be delivered with the BSWMD-file of the Crypto Driver. 7.1.1 CryptoPrimitive configuration The Crypto Driver contains one or more crypto driver objects that each supports one or more crypto primitive service. Algorithm family and mode provides details on how to operate crypto primitive services. For example, the crypto primitive service “Encrypt” supports the Family “AES” and the mode “CBC”. Further refinements are required by setting secondary family values. The CryptoPrimitive configuration of a crypto driver object defines the possible options for a crypto primitive service. From the example above, the driver can support the modes CBC or ECB for an AES algorithm. This is sometimes referred as the “capabilities” of the driver for a specific crypto primitive service.
AES is the symmetric cryptographic algorithm used to achieve the secure communication in automotive ECU.
AES has different sub categories- ECB,CBC, CCM,CTR.
In automotive ECU's the HSM is present and executed in isolated core, the content is not accesible by host core.
This makes HSM a good fit for trusted platform execution.
Autosar provides the layered architecture for crypto stack - first it strarts from CSM, CryIf and then CryIf
interacts with CDH(Crypto driver hardware) this layer interacts proxy.
Proxy is the interface between CDH and HSM, proxy know which API to cal in HSM.
Main feature of HSM are:
1. Digital signature generation and verification.
2. Certificate management.
3. Secure Boot execution for the host.
what is AES? AES is 